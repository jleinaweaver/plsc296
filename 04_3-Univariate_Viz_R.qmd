---
format: revealjs
---

## Today's Agenda {background-image="Images/background-data_blue_v3.png" .center}

```{r}
library(tidyverse)
library(readxl)
library(kableExtra)
library(modelsummary)
```

<br>

::: {.r-fit-text}

**Univariate Analyses**

- Build univariate visualizations in R

:::

<br>

::: r-stack
Justin Leinaweaver (Spring 2025)
:::

::: notes
Prep for Class

1. ...

<br>

On Monday we used R to calculate our first statistics

- For categorical variables we counted levels (and converted some to proportions)

- For numerical variables we calculated descriptive statistics focused primarily on describing the middle and the spread of each variable

<br>

Last class we built visualizations of data by hand in order to reinforce the intuitions of each tool.

<br>

Today we combine those two tasks and build visualizations in R!
:::



## {background-image="Images/background-slate_v2.png"}

:::{.r-fit-text}
**Create an R Script and name it "Univariate_Visualizations.R"**
:::

- Option 1: "File" &#8594; "New File" &#8594; "R Script"

- Option 2:

![](Images/03_3-New_Script.png){.absolute bottom=0 left=200}

::: notes

Let's get set-up!

- Everybody create a new R script for notes and code on building univariate visualizations.
:::



## ggplot() for making visualizations {background-image="Images/background-slate_v2.png" .center}

```{r, echo = FALSE, fig.align = 'center'}
knitr::include_graphics("Images/03_2-ggplot_logo.png")
```

**Note: You have to load the tidyverse to use ggplot**

```{r, echo=TRUE}
library(tidyverse)
```

::: notes
**Questions on the basics of ggplot as introduced in the Healy reading?**

<br>

A very valuable reference, keep it close to hand!
:::



## The GGplot Function: Two Basic Steps {background-image="Images/background-slate_v2.png" .center}

<br>

:::: {.columns}
::: {.column width="50%"}

<br>

**Step 1**

Map your tidy data
:::

::: {.column width="50%"}
```{r, echo = FALSE, fig.align = 'center', out.width = '70%'}
knitr::include_graphics("Images/03_2-Axes.png")
```
:::
::::

```{r, echo=TRUE, eval=FALSE}
## GGplot Step 1: Map the Data
ggplot(data = ?, aes(x = ?, y = ?))
```

::: notes

For today, I will ask you to make visualizations in R in two discrete steps

- There's a one step method and you can move to that when you feel ready.

<br>

Step 1: Map the data in the ggplot() function

- Your "map" of the data has to tell ggplot() what your dataset is AND which variables you want in your visualization

- Here I'm showing a hypothetical plot with space for a variable on the y axis and one on the x axis

<br>

As the Healy reading made clear, we can save anything in R as a named object using the "<-" operator

- This object name becomes a shortcut to the code you already wrote

- So, you will save this "map" of the data in a new object
:::



## The GGplot Function: Two Basic Steps {background-image="Images/background-slate_v2.png" .center}

<br>

**Step 2: Add a geom**

```{r, echo=TRUE, eval=FALSE}
# GGplot Step 2: Add a geom
ggplot(...) + geom_bar()
ggplot(...) + geom_histogram()
ggplot(...) + geom_boxplot()
ggplot(...) + geom_line()
```

::: notes

Step 2, tell ggplot what kind of picture to draw using this data.
- Everybody write these down!

<br>

REMEMBER, data analysis principle 3 is "Variable type determines tool"
- ggplot calls each tool a 'geom'

<br>

Let's practice doing these two steps to remake all the plots you drew by hand last class.
:::



## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**Categorical Variable: Make a Bar Plot**
:::

<br>

**By hand**, draw a bar plot of drive train levels (drv) for the 234 cars in the mpg dataset.

1. Count the levels

2. Draw X axis with labels

3. Draw Y axis to max height

4. Add the bars

::: notes

Last class our first visualization was to make a bar plot of drive train levels by cars in the `mpg` dataset.

<br>

**SLIDE**: Let's now have R do this for us.

:::




## Categorical Variable: Make a Bar Plot {background-image="Images/background-slate_v2.png" .center}

<br>

**In R** make a bar plot of drive train levels (`drv`) for the 234 cars in the `mpg` dataset.]

<br>

```{r, echo=TRUE, eval=FALSE}
## GGplot Step 1: Map the data
ggplot(data = ?, aes(x = ?, y = ?))
```

::: notes

Ok, let's map the data

- Help me fill in the question mark spaces

<br>

### What is the dataset we are working with?
- (**SLIDE**)
:::


## Categorical Variable: Make a Bar Plot {background-image="Images/background-slate_v2.png" .center}

<br>

**In R** make a bar plot of drive train levels (`drv`) for the 234 cars in the `mpg` dataset.]

<br>

```{r, echo=TRUE, eval=FALSE}
## GGplot Step 1: Map the data
ggplot(data = mpg, aes(x = ?, y = ?))
```

::: notes

Easy.

<br>

Now, inside the aes function we specify what we want on the x and y axes of the plot.

<br>

We're building a bar plot which is a univariate visualization so we only have to specify one of the axes

- Let's build our bar plot on the x-axis

<br>

### What is the variable we want to map to the x axis?

- (**SLIDE**)
:::


## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.asp=.618, fig.retina=3, out.width='70%', fig.width=5}
## GGplot Step 1: Map the Data
ggplot(data = mpg, aes(x = drv))
```

::: notes

After you finish your data mapping, run the line to save the object and then type the name of the object into your console

- Run 'plot1'

<br>

By sending the data mapping to the console we can see how ggplot has set up the visualization.

- Here we see a blank plot with room reserved across the x-axis for the three levels of the `drv` variable.

<br>

### Everybody have this?

<br>

### According to your notes which geom do we need for making a bar plot?

- (**SLIDE**)
:::


## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.retina=3, out.width='55%', fig.asp=.8, fig.width=4}
## Make a bar plot
ggplot(data = mpg, aes(x = drv)) + geom_bar()
```

::: notes

Step 2 we add a tool (geom) to the plot.

- ggplot works using `+` like you are adding functions together.

<br>

### Everybody have this plot made?

### - Understand the logic of the code?

<br>

### What would happen if you changed the 'x' in the map to a 'y'?

### - Don't do it yet, just tell me what you think should happen!

<br>

Try it!

- (**SLIDE**)

:::

## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.retina=3, out.width='55%', fig.asp=.8, fig.width=4}
## Make a bar plot (on the y-axis)
ggplot(data = mpg, aes(y = drv)) + geom_bar()
```

::: notes

The visualization features of R are immense and, once you learn the code, SUPER easy to implement.

- **SLIDE**: For example...
:::


## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.retina=3, out.width='55%', fig.asp=.8, fig.width=4}
## Shrink the bars and fill them with color 
ggplot(data = mpg, aes(y = drv)) +
  geom_bar(width = .5, fill = "blue")
```

::: notes

Using the width argument in geom_bar you can adjust the bars themselves
- Basically any value is possible but from 0 to 1 is probably most useful

<br>

The "fill" argument allows us to color the bars

- Feel free to google colors in R and you'll see that basically any color the computer can make can be used.

<br>

### Any questions on making a basic bar plot in R?

- Feed it a categorical variable and let it do the work.

<br>

**SLIDE**: Let's practice
:::




## Categorical Variable: Make a Bar Plot {background-image="Images/background-slate_v2.png" .center}

<br>

**In R** make a bar plot of parties (`party`) that have controlled the presidency since 1953 in the `presidential` data set.

::: notes

:::


## Categorical Variable: Make a Bar Plot {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.asp=.8, fig.width=4}
## Use separate colors for each bar
ggplot(data = presidential, aes(x = party)) +
  geom_bar(width = .5, fill = c("royalblue1", "firebrick3"))
```

::: notes

Kind of cool that you can easily specify different colors for different bars.

<br>

### Any questions on making simple bar plots?

<br>

Now let's shift our focus to numeric variables.

<br>

### Think back to last class, what are the visualization tools we can use when summarizing a numeric variable?
- (Histograms and box plots!)
:::


## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**Numerical Variable: Make a Histogram**
:::

<br>

1. Make a binned table of city fuel economy (mpg data set)
    - Bin 1: 0 - 10
    - Bin 2: 11 - 20
    - Bin 3: 21 - 30
    - Bin 4: 31 - 40

2. Make a bar plot of these bins

::: notes

The first histogram we made last class required us to summarize a table with bins.

- The good news is that R will do all of this for us.
:::



## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**Numerical Variable: Make a Histogram**
:::

<br>

**In R** make a histogram of city fuel economy (`cty`) in the `mpg` data set.

- Note: Use geom_histogram()

::: notes

Everybody use the basic logic from our bar plots but replace the geom_bar with geom_histogram

- The dataset is `mpg`

- The variable of interest is `cty`

<br>

(**SLIDE**)
:::


## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.retina=3, out.width='55%', fig.asp=.8, fig.width=4}
## Make a histogram
ggplot(data = mpg, aes(x = cty)) +
  geom_histogram()
```

::: notes
**Everybody get this?**
:::


## {background-image="Images/background-slate_v2.png" .center}

:::: {.columns}
::: {.column width="50%"}
**By Hand**

```{r, echo=FALSE, fig.asp=1, out.width='100%', fig.width=5}
mpg |>
  mutate(
    cty2 = case_when(
      cty < 10 ~ "0 - 10",
      cty < 20 ~ "11 - 20",
      cty < 30 ~ "21 - 30",
      cty < 40 ~ "31 - 40")
  ) |>
  ggplot(aes(x = cty2)) +
  geom_bar(width = .75, fill = "orange3") +
  theme_bw() +
  labs(x = "Fuel Economy (City)", y = "Proportion of Observations") +
  geom_hline(yintercept = seq(50, 150, 50), color = "white")
```
:::

::: {.column width="50%"}
**R Defaults**

```{r, echo=FALSE, fig.asp=1, fig.width=5}
## Make a histogram
ggplot(data = mpg, aes(x = cty)) +
  geom_histogram()
```
:::
::::

::: notes

On the left is what we made by hand with four bins and on the right is R's histogram which defaults to 30 bins

<br>

**SLIDE**: We can easily adjust the bins
:::



## {background-image="Images/background-slate_v2.png" .center}

:::: {.columns}
::: {.column width="50%"}
**geom_histogram(bins = 5)**

```{r, echo=FALSE, fig.asp=1, fig.width=5}
ggplot(data = mpg, aes(x = cty)) +
  geom_histogram(bins = 5, color = "white")
```
:::

::: {.column width="50%"}
**geom_histogram(bins = 20)**

```{r, echo=FALSE, fig.asp=1, fig.width=5}
ggplot(data = mpg, aes(x = cty)) +
  geom_histogram(bins = 20, color = "white")
```
:::
::::

::: notes

R will let you adjust the number of bins using the 'bins' option.

- The plots look different because R defined the four bins differently from how we did it.

- The key is that both convey the same general distribution

<br>

Try it out!

<br>

### Questions on the histogram code?

:::


## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**Numerical Variable: Make a Box Plot**
:::

<br>

**In R** make a box plot of city fuel economy (`cty`) in the `mpg` data set.

- Note: Use geom_boxplot()

::: notes

Last class we also visualized numeric variables using a box plot.

- Super easy, everybody just replace histogram with boxplot
:::



## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.asp=.8, fig.width=4}
## Step 1: Map the Data and Step 2: Add a geom
ggplot(data = mpg, aes(x = cty)) +
  geom_boxplot()
```

::: notes
**Everybody get this?**

<br>

### Any questions on the boxplot code?

:::



## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**Numerical Variable: Practice Both!**
:::

<br>

**In R** make a **histogram AND a box plot** of the proportion of people that are college educated (`percollege`) in midwest cities (`midwest` data set).

::: notes

:::


## {background-image="Images/background-slate_v2.png" .center .smaller}

:::: {.columns}
::: {.column width="50%"}
```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.retina=3, out.width='100%', fig.asp=.8, fig.width=4}
ggplot(data = midwest, aes(x = percollege)) +
  geom_histogram(bins = 25)
```
:::

::: {.column width="50%"}
```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.retina=3, out.width='100%', fig.asp=.8, fig.width=4}
ggplot(data = midwest, aes(x = percollege)) +
  geom_boxplot()
```
:::
::::

::: notes
**Everybody get this?**

<br>

### What do we learn from this data about the cities in the midwest?

:::




## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**Numeric Variables Across Time: Line Plots**
:::

<br>

**In R** make a line plot of the US unemployment (`unemploy`) across time (`date`) using the `economics` data set.

- Use geom_line()

- You must specify an X and a Y variable!

::: notes

Last one, let's make our line plots using R!

:::



## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=TRUE, fig.align='center', fig.asp=.8, fig.width=4}
# Make a line plot
ggplot(data = economics, aes(x = date, y = unemploy)) +
  geom_line()
```

::: notes

When we did this by hand I had you do the most recent one year only to keep it feasible.

- This software approach means bigger data is no problem!

<br>

### Any questions on the code?
:::


## Principle 3 {background-image="Images/background-slate_v2.png" .center}

**Variable Type Determines Tool**

<br>

**Univariate Visualizations**

+ If a **categorical** variable, make a **bar plot**

+ If a **numeric** variable, make a **box plot** or **histogram**

+ If a **numeric variable across time**, make a **line plot**

::: notes
**Questions on making these plots in R?**

<br>

**SLIDE**: Let's talk outputting the viz you make in R for copying into a Word Doc.
:::



## {background-image="Images/background-slate_v2.png" .center}

![](Images/04_3-export_image1.png){style="display: block; margin: 0 auto"}

::: notes

Three useful options through the export menu.

- Comes down to your preference.
:::




## {background-image="Images/background-slate_v2.png" .center}

![](Images/04_3-export_image2.png){style="display: block; margin: 0 auto"}

::: notes

If saving as an image it defaults to png.

- You can then click and drag the size of this window to adjust the dimensions of the image.

- The bigger the picture, the higher the resolution (and file size)

- So, make sure to get the image the right size and sharpness here before importing into Word

<br>

**SLIDE**: So, you're working from home and you get stuck, what should you do?
:::



## {background-image="Images/background-slate_v2.png" .center}

:::: {.columns}
::: {.column width="50%"}

<br>

<br>

+ Recipes 3.3 for bar plots

+ Recipe 6.1 for histograms

+ Recipe 6.6 for box plots

+ Recipe 4.1 for line Plots

+ Recipe 10.26 for outputting visualizations
:::

::: {.column width="50%"}

![](Images/04_3-R_Graphics_Cookbook.jpg)

:::
::::

::: notes

SUPER useful reference book.

- Freely available online

- Laid out like a cookbook.
    - Each section is a recipe designed to help you solve a specific problem.

- I've linked to some very helpful ones throughout our syllabus.

<br>

Something not working? Notes incomplete?

- Try the cookbook!

- Just copy the recipes into your notes, update the names of the data and variables and it should work!

:::


## {background-image="Images/background-slate_v2.png" .center}

::: {.r-fit-text}
**For Next Class**

1. World Development Indicators: The Story

2. Practice Exercises
:::
::: notes

Next class we'll start working with some data collected by the World Bank.

- The reading introduces you to the WDI database.

<br>

So, do that reading and the following practice exercises!

:::


## {background-image="Images/background-slate_v2.png" .center}

```{r, echo=TRUE, eval=FALSE}
# Install new package (only 1 time)
install.packages("carData")

# Load the package to access the following datasets (each time)
library(carData)
```

<br>

1. What is the regional breakdown of UN member states? (`UN` dataset, `region` variable)

2. How much variation is there in life expectancy rates around the world? (`UN` dataset, `lifeExpF` variable)

3. Visualize the growth in the US population since 1790  (`USPop` dataset, `population` variable)


::: notes

The `carData` package gives us access to some useful datasets for practicing your univariate visualization skills

- I want us to start practicing delivering visualizations so I will ask you to submit your three visualizations to Canvas BEFORE class.

- Underneath each visualization I want a 1-3 sentence annotation explaining what you learned from this plot

<br>

### Questions on the assignment?

- Get to work!

:::